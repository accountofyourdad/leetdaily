//day 2
//2966. Divide Array Into Arrays With Max Difference
//You are given an integer array nums of size n and a positive integer k.

// Divide the array into one or more arrays of size 3 satisfying the following conditions:

// Each element of nums should be in exactly one array.
// The difference between any two elements in one array is less than or equal to k.
// Return a 2D array containing all the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.

 

// Example 1:

// Input: nums = [1,3,4,8,7,9,3,5,1], k = 2
// Output: [[1,1,3],[3,4,5],[7,8,9]]
// Explanation: We can divide the array into the following arrays: [1,1,3], [3,4,5] and [7,8,9].
// The difference between any two elements in each array is less than or equal to 2.
// Note that the order of elements is not important.
// Example 2:

// Input: nums = [1,3,3,2,7,3], k = 3
// Output: []
// Explanation: It is not possible to divide the array satisfying all the conditions.

class Solution {
public:
    vector<vector<int>> divideArray(vector<int>& nums, int k) {        //given
      
        vector<int>vec;            //arrey in arrey that inside arrey
        vector<vector<int>> empty;
        vector<vector<int>>ans;        //for final ans making an arrey
        sort(nums.begin(),nums.end());        //sort the list
        
        if (nums.size() % 3 != 0)        //atleast there should be 3 group of any one remain from geting any group of 3 than return a empty array as we defined above
            return empty;

        vec.push_back(nums[0]);
        for(int i=1;i<=nums.size();i++){
            if(vec.size()<3 && nums[i]-vec[0]>k){
                return empty;
            }
            else if(vec.size()<3 && nums[i]-vec[0]<=k){
                vec.push_back(nums[i]);
            }
            else if(vec.size()==3){
                    ans.push_back(vec);
                    vec.clear();    //clear to make it use full to another set of element or else it will increase in length as a dynamic arrey
                    vec.push_back(nums[i]);
                }  
            }
        
       // ans.push_back(vec);
        return ans;
    }
};
